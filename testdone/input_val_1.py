# File or Class name: input_val_1.py
# Program author(s): Anuj Dwivedi
# Course number and title: COSC4603 - Computer Theory
# Assignment number and name: Assignment #1 - REGULAR EXPRESSION RECOGNIZER
# Due date: 29th January 2024
# Brief description of the purpose of the program::
# This Python program validates user-input regular expressions for characters {a, b, /, *, (, )} AND
# Accept only those strings that can be generated by the given language grammar.


# the complete code plus readme posted to github
"""Github : https://github.com/ANUJDWIVDI/inputvalidator_assign """

""" Set of Functions S,E,T,F,Q,R,U That denote the given state and if Grammar rules are being followed"""

nextAvailable = 0
stateStk = []
adjMat = []
for i in range(50):
    adjMat.append([])
for i in adjMat:
    for k in range(50):
        i.append("")


def S(exp):
    global index
    index = 0
    if not T(exp):
        return False
    if not Q(exp):
        return False
    return index == len(exp)


def E(exp):
    global index
    if not T(exp):
        return False
    if not Q(exp):
        return False
    if index < len(exp) and exp[index] == ')' and index + 1 != len(exp):
        return True
    return False


def T(exp):
    global index
    if index < len(exp) and exp[index] in ('(', 'a', 'b'):
        if not F(exp):
            return False
        if not R(exp):
            return False
        return True
    return False


def F(exp):
    global index, nextAvailable, stateStk, adjMat
    if index < len(exp) and exp[index] in ('a', 'b'):
        adjMat[nextAvailable][nextAvailable + 1] += exp[index]
        stateStk.append([nextAvailable, nextAvailable + 1])
        nextAvailable += 2
        index += 1
        if not U(exp):
            return False
        return True
    elif index < len(exp) and exp[index] == '(':
        index += 1
        if not E(exp):
            return False
        if index < len(exp) and exp[index] == ')':
            index += 1
        else:
            return False
        if not U(exp):
            return False
        return True
    return False


def Q(exp):
    global index, nextAvailable, stateStk ,adjMat
    if index < len(exp) and exp[index] == '+':
        index += 1
        if not T(exp):
            return False
        # building the or machine
        temp1 = stateStk.pop()
        temp2 = stateStk.pop()

        adjMat[nextAvailable][temp2[0]] += 'e'
        adjMat[nextAvailable][temp1[0]] += 'e'
        adjMat[temp2[1]][nextAvailable + 1] += 'e'
        adjMat[temp1[1]][nextAvailable + 1] += 'e'
        stateStk.append([nextAvailable, nextAvailable + 1])
        nextAvailable += 2

        if not Q(exp):
            return False
        return True
    return True


def R(exp):
    global index, nextAvailable, adjMat, stateStk
    if index < len(exp) and exp[index] in ('(', 'a', 'b'):
        if not F(exp):
            return False
        temp1 = stateStk.pop()
        temp2 = stateStk.pop()

        adjMat[temp2[1]][temp1[0]] += 'e'
        #adjMat[temp1[1]][nextAvailable + 1] += 'e'
        #adjMat[nextAvailable][temp2[0]] += 'e'
        stateStk.append([temp2[0],temp1[1]])


        if not R(exp):
            return False
        return True
    return True


def U(exp):
    global index, nextAvailable, stateStk , adjMat
    if index < len(exp) and exp[index] == '*':
        index += 1
        # build kleene machine
        popped = stateStk.pop()
        adjMat[nextAvailable][popped[0]] += 'e'
        adjMat[nextAvailable][nextAvailable + 1] += 'e'
        adjMat[popped[1]][nextAvailable + 1] += 'e'
        stateStk.append([nextAvailable, nextAvailable + 1])
        nextAvailable += 2
        U(exp)
    return True


""" Follow Up and addition of logic through above functions in below given code """


def valid(char):
    if char in ['a', 'b', '*', '(', ')', '|', '$','+']:
        return 1
    else:
        return 0


print("Enter a Regular exp! , Type 'exit' to quit: ")

input_strings = []  # A list to store the range of regular expressions whose validity is to be determined.

input_string = input()

flag = 0  # to act as a flag variable to indicate validity of expression
result = ''  # to store the valid or invalid string chain
result2 = ''  # to act as the second line of chain with ^ pointer

if True:
    exp = input_string
    flag = 0
    result = ''
    result2 = ''

    index = 0
    next_char = exp[0]


    def get_next_char():  # Function that helps fetch the preceeding character .
        global index, next_char
        if (index + 1) < len(exp):
            index = index + 1
            next_char = exp[index]
        elif (index + 1) == len(exp):
            index += 1
            next_char = '$'


    for x in exp:
        if x != ' ' and x != '\t':
            if valid(x):
                result += x
                result2 += ' '
            else:
                flag = 1
                result += x
                result2 += '^'
        elif x == '\t':
            for y in range(4):
                result += ' '
                result2 += ' '
        else:
            result += ' '
            result2 += ' '

    index = 0  # Resets the index for each input string
    next_char = exp[0]  # Resets the next character for each input string

    if not S(exp):
        print(f"INVALID: {exp}")
        if not result2.isspace():
            print("        ", result2, "\t\t\t Invalid Symbols Used")
        else:
            print("\t\t\t\t\t\tInvalid Due to Incorrect Grammar Use")
    else:
        print(f"VALID: {exp}")
        print("Expression Accepted")
        height=0
        print(nextAvailable)
        for ind1,i in enumerate(adjMat):
            a=[]
            b=[]
            e=[]
            for ind2,k in enumerate(i):
                if 'a' in k:
                    a.append(ind2)
                if 'b' in k:
                    b.append(ind2)
                if 'e' in k:
                    e.append(ind2)
            if not (a or b or e):
                height=ind1 + 1
                break
            print(str(ind1)+'\t'+str(a)+'\t'+str(b)+'\t'+str(e))
        print(str(ind1) + '\t' + str(a) + '\t' + str(b) + '\t' + str(e))
        print("NFA States")
        print("Start:",height - 2)
        print("accept:",height-1)